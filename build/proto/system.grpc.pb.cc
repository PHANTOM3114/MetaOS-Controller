// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/system.proto

#include "proto/system.pb.h"
#include "proto/system.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace MetaOS {

static const char* MetaControl_method_names[] = {
  "/MetaOS.MetaControl/ShutdownSystemRequest",
  "/MetaOS.MetaControl/RunShellScriptRequest",
  "/MetaOS.MetaControl/OpenAppRequest",
};

std::unique_ptr< MetaControl::Stub> MetaControl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MetaControl::Stub> stub(new MetaControl::Stub(channel, options));
  return stub;
}

MetaControl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ShutdownSystemRequest_(MetaControl_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunShellScriptRequest_(MetaControl_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenAppRequest_(MetaControl_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MetaControl::Stub::ShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::MetaOS::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MetaOS::ShutdownSystem, ::MetaOS::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShutdownSystemRequest_, context, request, response);
}

void MetaControl::Stub::async::ShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem* request, ::MetaOS::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MetaOS::ShutdownSystem, ::MetaOS::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutdownSystemRequest_, context, request, response, std::move(f));
}

void MetaControl::Stub::async::ShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem* request, ::MetaOS::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutdownSystemRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* MetaControl::Stub::PrepareAsyncShutdownSystemRequestRaw(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MetaOS::Response, ::MetaOS::ShutdownSystem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShutdownSystemRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* MetaControl::Stub::AsyncShutdownSystemRequestRaw(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownSystemRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetaControl::Stub::RunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::MetaOS::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MetaOS::RunShellScript, ::MetaOS::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunShellScriptRequest_, context, request, response);
}

void MetaControl::Stub::async::RunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript* request, ::MetaOS::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MetaOS::RunShellScript, ::MetaOS::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunShellScriptRequest_, context, request, response, std::move(f));
}

void MetaControl::Stub::async::RunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript* request, ::MetaOS::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunShellScriptRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* MetaControl::Stub::PrepareAsyncRunShellScriptRequestRaw(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MetaOS::Response, ::MetaOS::RunShellScript, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunShellScriptRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* MetaControl::Stub::AsyncRunShellScriptRequestRaw(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunShellScriptRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MetaControl::Stub::OpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::MetaOS::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MetaOS::OpenApp, ::MetaOS::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OpenAppRequest_, context, request, response);
}

void MetaControl::Stub::async::OpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp* request, ::MetaOS::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MetaOS::OpenApp, ::MetaOS::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OpenAppRequest_, context, request, response, std::move(f));
}

void MetaControl::Stub::async::OpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp* request, ::MetaOS::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OpenAppRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* MetaControl::Stub::PrepareAsyncOpenAppRequestRaw(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MetaOS::Response, ::MetaOS::OpenApp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OpenAppRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* MetaControl::Stub::AsyncOpenAppRequestRaw(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOpenAppRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

MetaControl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetaControl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetaControl::Service, ::MetaOS::ShutdownSystem, ::MetaOS::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetaControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MetaOS::ShutdownSystem* req,
             ::MetaOS::Response* resp) {
               return service->ShutdownSystemRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetaControl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetaControl::Service, ::MetaOS::RunShellScript, ::MetaOS::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetaControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MetaOS::RunShellScript* req,
             ::MetaOS::Response* resp) {
               return service->RunShellScriptRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetaControl_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetaControl::Service, ::MetaOS::OpenApp, ::MetaOS::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetaControl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MetaOS::OpenApp* req,
             ::MetaOS::Response* resp) {
               return service->OpenAppRequest(ctx, req, resp);
             }, this)));
}

MetaControl::Service::~Service() {
}

::grpc::Status MetaControl::Service::ShutdownSystemRequest(::grpc::ServerContext* context, const ::MetaOS::ShutdownSystem* request, ::MetaOS::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetaControl::Service::RunShellScriptRequest(::grpc::ServerContext* context, const ::MetaOS::RunShellScript* request, ::MetaOS::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetaControl::Service::OpenAppRequest(::grpc::ServerContext* context, const ::MetaOS::OpenApp* request, ::MetaOS::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MetaOS

