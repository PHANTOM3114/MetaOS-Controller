// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/system.proto
#ifndef GRPC_proto_2fsystem_2eproto__INCLUDED
#define GRPC_proto_2fsystem_2eproto__INCLUDED

#include "proto/system.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace MetaOS {

class MetaControl final {
 public:
  static constexpr char const* service_full_name() {
    return "MetaOS.MetaControl";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::MetaOS::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>> AsyncShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>>(AsyncShutdownSystemRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>> PrepareAsyncShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>>(PrepareAsyncShutdownSystemRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status RunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::MetaOS::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>> AsyncRunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>>(AsyncRunShellScriptRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>> PrepareAsyncRunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>>(PrepareAsyncRunShellScriptRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status OpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::MetaOS::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>> AsyncOpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>>(AsyncOpenAppRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>> PrepareAsyncOpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>>(PrepareAsyncOpenAppRequestRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem* request, ::MetaOS::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem* request, ::MetaOS::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript* request, ::MetaOS::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript* request, ::MetaOS::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp* request, ::MetaOS::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp* request, ::MetaOS::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>* AsyncShutdownSystemRequestRaw(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>* PrepareAsyncShutdownSystemRequestRaw(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>* AsyncRunShellScriptRequestRaw(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>* PrepareAsyncRunShellScriptRequestRaw(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>* AsyncOpenAppRequestRaw(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MetaOS::Response>* PrepareAsyncOpenAppRequestRaw(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::MetaOS::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>> AsyncShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>>(AsyncShutdownSystemRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>> PrepareAsyncShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>>(PrepareAsyncShutdownSystemRequestRaw(context, request, cq));
    }
    ::grpc::Status RunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::MetaOS::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>> AsyncRunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>>(AsyncRunShellScriptRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>> PrepareAsyncRunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>>(PrepareAsyncRunShellScriptRequestRaw(context, request, cq));
    }
    ::grpc::Status OpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::MetaOS::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>> AsyncOpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>>(AsyncOpenAppRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>> PrepareAsyncOpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>>(PrepareAsyncOpenAppRequestRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem* request, ::MetaOS::Response* response, std::function<void(::grpc::Status)>) override;
      void ShutdownSystemRequest(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem* request, ::MetaOS::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript* request, ::MetaOS::Response* response, std::function<void(::grpc::Status)>) override;
      void RunShellScriptRequest(::grpc::ClientContext* context, const ::MetaOS::RunShellScript* request, ::MetaOS::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp* request, ::MetaOS::Response* response, std::function<void(::grpc::Status)>) override;
      void OpenAppRequest(::grpc::ClientContext* context, const ::MetaOS::OpenApp* request, ::MetaOS::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* AsyncShutdownSystemRequestRaw(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* PrepareAsyncShutdownSystemRequestRaw(::grpc::ClientContext* context, const ::MetaOS::ShutdownSystem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* AsyncRunShellScriptRequestRaw(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* PrepareAsyncRunShellScriptRequestRaw(::grpc::ClientContext* context, const ::MetaOS::RunShellScript& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* AsyncOpenAppRequestRaw(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MetaOS::Response>* PrepareAsyncOpenAppRequestRaw(::grpc::ClientContext* context, const ::MetaOS::OpenApp& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ShutdownSystemRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_RunShellScriptRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenAppRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ShutdownSystemRequest(::grpc::ServerContext* context, const ::MetaOS::ShutdownSystem* request, ::MetaOS::Response* response);
    virtual ::grpc::Status RunShellScriptRequest(::grpc::ServerContext* context, const ::MetaOS::RunShellScript* request, ::MetaOS::Response* response);
    virtual ::grpc::Status OpenAppRequest(::grpc::ServerContext* context, const ::MetaOS::OpenApp* request, ::MetaOS::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ShutdownSystemRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShutdownSystemRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ShutdownSystemRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownSystemRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::ShutdownSystem* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownSystemRequest(::grpc::ServerContext* context, ::MetaOS::ShutdownSystem* request, ::grpc::ServerAsyncResponseWriter< ::MetaOS::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunShellScriptRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunShellScriptRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RunShellScriptRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunShellScriptRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::RunShellScript* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunShellScriptRequest(::grpc::ServerContext* context, ::MetaOS::RunShellScript* request, ::grpc::ServerAsyncResponseWriter< ::MetaOS::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenAppRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenAppRequest() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OpenAppRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenAppRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::OpenApp* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenAppRequest(::grpc::ServerContext* context, ::MetaOS::OpenApp* request, ::grpc::ServerAsyncResponseWriter< ::MetaOS::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ShutdownSystemRequest<WithAsyncMethod_RunShellScriptRequest<WithAsyncMethod_OpenAppRequest<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ShutdownSystemRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShutdownSystemRequest() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MetaOS::ShutdownSystem, ::MetaOS::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MetaOS::ShutdownSystem* request, ::MetaOS::Response* response) { return this->ShutdownSystemRequest(context, request, response); }));}
    void SetMessageAllocatorFor_ShutdownSystemRequest(
        ::grpc::MessageAllocator< ::MetaOS::ShutdownSystem, ::MetaOS::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MetaOS::ShutdownSystem, ::MetaOS::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShutdownSystemRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownSystemRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::ShutdownSystem* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShutdownSystemRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::MetaOS::ShutdownSystem* /*request*/, ::MetaOS::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RunShellScriptRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RunShellScriptRequest() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MetaOS::RunShellScript, ::MetaOS::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MetaOS::RunShellScript* request, ::MetaOS::Response* response) { return this->RunShellScriptRequest(context, request, response); }));}
    void SetMessageAllocatorFor_RunShellScriptRequest(
        ::grpc::MessageAllocator< ::MetaOS::RunShellScript, ::MetaOS::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MetaOS::RunShellScript, ::MetaOS::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RunShellScriptRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunShellScriptRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::RunShellScript* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunShellScriptRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::MetaOS::RunShellScript* /*request*/, ::MetaOS::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OpenAppRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OpenAppRequest() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::MetaOS::OpenApp, ::MetaOS::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MetaOS::OpenApp* request, ::MetaOS::Response* response) { return this->OpenAppRequest(context, request, response); }));}
    void SetMessageAllocatorFor_OpenAppRequest(
        ::grpc::MessageAllocator< ::MetaOS::OpenApp, ::MetaOS::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MetaOS::OpenApp, ::MetaOS::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OpenAppRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenAppRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::OpenApp* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenAppRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::MetaOS::OpenApp* /*request*/, ::MetaOS::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ShutdownSystemRequest<WithCallbackMethod_RunShellScriptRequest<WithCallbackMethod_OpenAppRequest<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ShutdownSystemRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShutdownSystemRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ShutdownSystemRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownSystemRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::ShutdownSystem* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunShellScriptRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunShellScriptRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RunShellScriptRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunShellScriptRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::RunShellScript* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenAppRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenAppRequest() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OpenAppRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenAppRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::OpenApp* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShutdownSystemRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShutdownSystemRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ShutdownSystemRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownSystemRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::ShutdownSystem* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownSystemRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunShellScriptRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunShellScriptRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RunShellScriptRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunShellScriptRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::RunShellScript* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunShellScriptRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenAppRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenAppRequest() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OpenAppRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenAppRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::OpenApp* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenAppRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShutdownSystemRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShutdownSystemRequest() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShutdownSystemRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShutdownSystemRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownSystemRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::ShutdownSystem* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShutdownSystemRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RunShellScriptRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RunShellScriptRequest() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunShellScriptRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_RunShellScriptRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunShellScriptRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::RunShellScript* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunShellScriptRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OpenAppRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OpenAppRequest() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenAppRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_OpenAppRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenAppRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::OpenApp* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenAppRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShutdownSystemRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShutdownSystemRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MetaOS::ShutdownSystem, ::MetaOS::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MetaOS::ShutdownSystem, ::MetaOS::Response>* streamer) {
                       return this->StreamedShutdownSystemRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShutdownSystemRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShutdownSystemRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::ShutdownSystem* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdownSystemRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MetaOS::ShutdownSystem,::MetaOS::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunShellScriptRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunShellScriptRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MetaOS::RunShellScript, ::MetaOS::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MetaOS::RunShellScript, ::MetaOS::Response>* streamer) {
                       return this->StreamedRunShellScriptRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunShellScriptRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunShellScriptRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::RunShellScript* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunShellScriptRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MetaOS::RunShellScript,::MetaOS::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenAppRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenAppRequest() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MetaOS::OpenApp, ::MetaOS::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MetaOS::OpenApp, ::MetaOS::Response>* streamer) {
                       return this->StreamedOpenAppRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OpenAppRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenAppRequest(::grpc::ServerContext* /*context*/, const ::MetaOS::OpenApp* /*request*/, ::MetaOS::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenAppRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MetaOS::OpenApp,::MetaOS::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ShutdownSystemRequest<WithStreamedUnaryMethod_RunShellScriptRequest<WithStreamedUnaryMethod_OpenAppRequest<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ShutdownSystemRequest<WithStreamedUnaryMethod_RunShellScriptRequest<WithStreamedUnaryMethod_OpenAppRequest<Service > > > StreamedService;
};

}  // namespace MetaOS


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_proto_2fsystem_2eproto__INCLUDED
